const express = require('express')
const jwt = require('jsonwebtoken')
const bodyParser = require('body-parser')

const app = express()
app.use(bodyParser.json())

const SECRET_KEY = 'mysecretkey'

// Sample users with roles
const users = [
  { username: 'admin', password: 'admin123', role: 'Admin' },
  { username: 'mod', password: 'mod123', role: 'Moderator' },
  { username: 'user', password: 'user123', role: 'User' }
]

// Login route - issues JWT with role in payload
app.post('/login', (req, res) => {
  const { username, password } = req.body
  const foundUser = users.find(u => u.username === username && u.password === password)

  if (!foundUser) {
    return res.status(401).json({ error: 'Invalid credentials' })
  }

  const token = jwt.sign(
    { username: foundUser.username, role: foundUser.role },
    SECRET_KEY,
    { expiresIn: '1h' }
  )

  res.json({ message: 'Login successful', token })
})

// Middleware to verify token
const verifyToken = (req, res, next) => {
  const authHeader = req.headers['authorization']
  if (!authHeader) return res.status(401).json({ error: 'Authorization header missing' })

  const token = authHeader.split(' ')[1]
  if (!token) return res.status(401).json({ error: 'Token missing' })

  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) return res.status(403).json({ error: 'Invalid or expired token' })
    req.user = decoded
    next()
  })
}

// Middleware to check user role
const authorizeRoles = (...allowedRoles) => {
  return (req, res, next) => {
    if (!req.user || !allowedRoles.includes(req.user.role)) {
      return res.status(403).json({ error: 'Access denied: insufficient permissions' })
    }
    next()
  }
}

// Public route
app.get('/', (req, res) => {
  res.json({ message: 'Welcome to the Role-Based Access Control API' })
})

// Protected routes
app.get('/user/profile', verifyToken, authorizeRoles('User', 'Moderator', 'Admin'), (req, res) => {
  res.json({ message: `Welcome ${req.user.username}! This is your user profile.` })
})

app.get('/moderator/manage', verifyToken, authorizeRoles('Moderator', 'Admin'), (req, res) => {
  res.json({ message: `Hello ${req.user.username}! You can manage user content here.` })
})

app.get('/admin/dashboard', verifyToken, authorizeRoles('Admin'), (req, res) => {
  res.json({ message: `Hello ${req.user.username}! Welcome to the admin dashboard.` })
})

// Start server
const PORT = 4000
app.listen(PORT, () => console.log(`Server running at http://localhost:${PORT}`))
